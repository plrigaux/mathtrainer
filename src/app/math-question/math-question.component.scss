@import "~@angular/material/theming";
@import "../../assets/styles/themes_variables.scss";

.content {
    margin: auto;
    width: max-content;
}

/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

/* Firefox */
input[type=number] {
    -moz-appearance: textfield;
}

.answerField {
    position: relative;
    display: inline;
}

.mathQuestion {
    //padding: 0.5em;
    font-size: 24px;
}

.equation.stacked .mathAnswer {
    text-align: right;
    margin-top: 5px;
}
/*
.wrong {
    background-color: red;
}

.right {
    background-color: limegreen;
}
*/
.equation.stacked {
    display: inline-block;
}

.equation.stacked .number {
    display: block;
    margin-left: 1em;
    /* space for the operator */
    text-align: right;
    margin-top: 2px;
    margin-bottom: 2px;
}

.equation.stacked .operator {
    float: left;
}

//$primary: mat-palette($mat-amber);

.equation.stacked .equals {
    display: block;
    height: 0;
    padding-bottom: 3px;
    border-bottom: solid 2px;
    //border-color: mat-color($primary);
    overflow: hidden;
}

.equation :not(:first-child):not(input) {
    //avoid the margin left when stacked
    margin-left: 0.3em;
}

.question {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: flex-end;
    align-items: flex-end;
}

.operator {
    padding-right: .2em;
}

.numbers {
    display: flex;
    flex-flow: column;
    align-items: flex-end;
}

.number {
    display: flex;
    flex-flow: row;
    align-items: center;
    justify-content: flex-end;
}

.digit {
    display: flex;
    width: 1em;
    height: 1em;
    align-items: center;
    justify-content: center;    
    padding: 2px 0;
    border-color: deeppink transparent; //to ensure the same with with the answer widjet
    border-width: 1px;
    border-left-style: dashed;
}

.digit:last-child {
    border-right-style: solid;
}

@mixin math-question-theme($theme) {
    $primary: map-get($theme, primary);
    $accent: map-get($theme, accent);
    $fg: map-get($theme, foreground);
    //$bg: map-get($theme, background);

    $th_text_color: #{mat-color($fg, text)};

    //@debug "fg: #{$primary}";
    //@debug "foreground: #{$th_text_color}";
    //@debug "background: #{mat-color($bg)}";
    //@debug "background: #{$bg}";
    
    .mathAnswer:focus {
        outline-color: mat-color($accent);
        outline-width: 15px;
        caret-color: mat-color($accent);
    }

    .hr_equals {
        margin: 4px 0;
        border-style: solid;
        border-color: mat-color($fg);

        background-color:  $th_text_color;
        border-color:  $th_text_color;
    }
}

@each $thclass, $th in $all_themes {
    @if $thclass == "" {
        @include math-question-theme($th);
    } @else {
        :host-context(.#{$thclass}) {
            @include math-question-theme($th);
        }
    }
}


